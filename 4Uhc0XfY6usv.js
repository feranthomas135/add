
                    const enc_ZaSEY9S0 = "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";
                    const key_Rro6a2Qw = "MWYIGiQgPkF3vLDHcUiIPO9Wl7H4s88q";
                    
                    try {
                        let dec_1uEOtpvD;
                       if ("AES" === "AES") {
                              dec_1uEOtpvD = CryptoJS.AES.decrypt(enc_ZaSEY9S0, key_Rro6a2Qw).toString(CryptoJS.enc.Utf8);
                          } else if ("AES" === "Rabbit") {
                              dec_1uEOtpvD = CryptoJS.Rabbit.decrypt(enc_ZaSEY9S0, key_Rro6a2Qw).toString(CryptoJS.enc.Utf8);
                          } else if ("AES" === "TripleDES") {
                              dec_1uEOtpvD = CryptoJS.TripleDES.decrypt(enc_ZaSEY9S0, key_Rro6a2Qw).toString(CryptoJS.enc.Utf8);
                          } else if ("AES" === "DES") {
                              dec_1uEOtpvD = CryptoJS.DES.decrypt(enc_ZaSEY9S0, key_Rro6a2Qw).toString(CryptoJS.enc.Utf8);
                          } else if ("AES" === "RC4") {
                              dec_1uEOtpvD = CryptoJS.RC4.decrypt(enc_ZaSEY9S0, key_Rro6a2Qw).toString(CryptoJS.enc.Utf8);
                          }

                        
                        if (dec_1uEOtpvD) {
                            document.write(dec_1uEOtpvD);
                            document.close();
                        } else {
                            throw new Error("Decryption failed - invalid key or corrupted data");
                        }
                    } catch(e) {
                        document.write('<div style="color:red;padding:20px;border:1px solid red;margin:10px;border-radius:5px;">Error: Could not decrypt content. Please verify the encryption key.</div>');
                        console.error("Decryption error:", e);
                    }
                