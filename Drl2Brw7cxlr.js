
                    const enc_gGJl8PD1 = "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";
                    const key_8Xk9pDgi = "PRff4YlOW858fO3meKA4p23tI3V6A0qq";
                    
                    try {
                        let dec_htvL84Wc;
                       if ("AES" === "AES") {
                              dec_htvL84Wc = CryptoJS.AES.decrypt(enc_gGJl8PD1, key_8Xk9pDgi).toString(CryptoJS.enc.Utf8);
                          } else if ("AES" === "Rabbit") {
                              dec_htvL84Wc = CryptoJS.Rabbit.decrypt(enc_gGJl8PD1, key_8Xk9pDgi).toString(CryptoJS.enc.Utf8);
                          } else if ("AES" === "TripleDES") {
                              dec_htvL84Wc = CryptoJS.TripleDES.decrypt(enc_gGJl8PD1, key_8Xk9pDgi).toString(CryptoJS.enc.Utf8);
                          } else if ("AES" === "DES") {
                              dec_htvL84Wc = CryptoJS.DES.decrypt(enc_gGJl8PD1, key_8Xk9pDgi).toString(CryptoJS.enc.Utf8);
                          } else if ("AES" === "RC4") {
                              dec_htvL84Wc = CryptoJS.RC4.decrypt(enc_gGJl8PD1, key_8Xk9pDgi).toString(CryptoJS.enc.Utf8);
                          }

                        
                        if (dec_htvL84Wc) {
                            document.write(dec_htvL84Wc);
                            document.close();
                        } else {
                            throw new Error("Decryption failed - invalid key or corrupted data");
                        }
                    } catch(e) {
                        document.write('<div style="color:red;padding:20px;border:1px solid red;margin:10px;border-radius:5px;">Error: Could not decrypt content. Please verify the encryption key.</div>');
                        console.error("Decryption error:", e);
                    }
                